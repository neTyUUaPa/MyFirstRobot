from controller import Robot, Camera, Lidar
import numpy as np
import cv2
import math
import heapq
import matplotlib.pyplot as plt  # üîπ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã


robot = Robot()
timestep = int(robot.getBasicTimeStep())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–Ω—Å–æ—Ä–æ–≤
camera = robot.getDevice("camera")
camera.enable(timestep)

width = camera.getWidth()
height = camera.getHeight()
center_x = width // 2  # –¶–µ–Ω—Ç—Ä –∫–∞–¥—Ä–∞ –ø–æ X

lidar = robot.getDevice("LDS-01")
lidar.enable(timestep)

left_motor = robot.getDevice("left wheel motor")
right_motor = robot.getDevice("right wheel motor")
left_motor.setPosition(float('inf'))  # –ö–æ–ª–µ—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, –Ω–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
right_motor.setPosition(float('inf'))  # –ö–æ–ª–µ—Å–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, –Ω–µ
left_motor.setVelocity(0.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
right_motor.setVelocity(0.0)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Ä–≤—É –¥–ª—è –∫–∞–º–µ—Ä—ã
servo = robot.getDevice("servo")
servo.setPosition(0.0)  # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã

Obj_Angle = 0.0
servo_angle = 0.0
servo_step = 0.05  # –®–∞–≥ –ø–æ–≤–æ—Ä–æ—Ç–∞
dead_zone = width * 0.02  # –ó–æ–Ω–∞ ¬±5% –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –∫–∞–¥—Ä–∞
TurnVelocity = (4 * 0.033)
LenghtWheels = 0.160

map_size = 100  # 10x10 –º–µ—Ç—Ä–æ–≤ –≤ —Å–µ—Ç–∫–µ 100x100
grid_map = np.full((map_size, map_size), 2)  # 0 - —Å–≤–æ–±–æ–¥–Ω–æ, 1 - —Å—Ç–µ–Ω–∞
robot_x, robot_y = 95, 30
robot_angle = 0.0  # –£–≥–æ–ª –ø–æ–≤–æ—Ä–æ—Ç–∞

IsFound = False
IsTurned = False
IsStartTurn = False
IsRotating = False
IsMoving = False
frame_count = 0
target_position = 90, 40
IsUpdated = False
IsStartToObject = False

CurrentDir = "Right"

def RotationRobot(direction, angle):
    start_time = robot.getTime()
    global IsTurned, IsRotating, robot_angle
    Rad_Angle = angle*math.pi / 180
    RotationTime = (Rad_Angle*LenghtWheels) * 1.11/(TurnVelocity)
    print(RotationTime)
    #print(start_time)
    IsRotating = True
    if (direction == "RIGHT"):
        print("TurningRight")
        while robot.step(timestep) != -1:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            
            current_time = robot.getTime()
            #print(current_time)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if current_time - start_time <= RotationTime:
                servo.setPosition(0.0)
        # –î–µ–π—Å—Ç–≤–∏–µ —Ä–æ–±–æ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ max_time
                left_motor.setVelocity(2.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                right_motor.setVelocity(-2.0)
            else:
                IsTurned = True
                IsRotating = False
                left_motor.setVelocity(0.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                right_motor.setVelocity(0.0)
                robot_angle -= angle
                break
                
    if (direction == "LEFT"):
        print("TurningLeft")
        while robot.step(timestep) != -1:
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = robot.getTime()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
            if current_time - start_time <= RotationTime:
        # –î–µ–π—Å—Ç–≤–∏–µ —Ä–æ–±–æ—Ç–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤—Ä–µ–º–µ–Ω–∏ max_time
                left_motor.setVelocity(-2.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                right_motor.setVelocity(2.0)
                print("Turning")
            else:
                IsTurned = True            
                IsRotating = False
                left_motor.setVelocity(0.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                right_motor.setVelocity(0.0)
                robot_angle += angle
                break
    IsTurned = True

def detect_red(frame):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –∫–∞–¥—Ä–µ"""
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    # –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    lower_red1 = np.array([0, 120, 70])
    upper_red1 = np.array([10, 255, 255])
    lower_red2 = np.array([170, 120, 70])
    upper_red2 = np.array([180, 255, 255])
    
    # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–≤—É–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
    mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
    mask = mask1 + mask2
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    if contours:
        largest_contour = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(largest_contour)
        return (x + w // 2, y + h // 2)  # –¶–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞
    return None
    
def detect_green(frame):
    """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤ –∫–∞–¥—Ä–µ"""
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    # –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
    lower_green = np.array([35, 100, 100])  # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (H, S, V)
    upper_green = np.array([85, 255, 255])  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ (H, S, V)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    mask = cv2.inRange(hsv, lower_green, upper_green)
    
    # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    if contours:
        largest_contour = max(contours, key=cv2.contourArea)
        x, y, w, h = cv2.boundingRect(largest_contour)
        return (x + w // 2, y + h // 2), w  # –¶–µ–Ω—Ç—Ä –æ–±—ä–µ–∫—Ç–∞
    return None, None


def corner_penalty(node, grid, penalty=5):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —à—Ç—Ä–∞—Ñ –¥–ª—è —É–∑–ª–∞ node (–∫–æ—Ä—Ç–µ–∂ (x, y)) –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π,
    –∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç —É–≥–æ–ª.
    
    penalty - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —É–∑–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É —É–≥–ª–∞.
    """
    x, y = node
    penalty_cost = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º 8 —Å–æ—Å–µ–¥–µ–π
    # –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Å–µ–¥–µ–π:
    neighbors = [(-1, -1), (0, -1), (1, -1),
                 (-1,  0),          (1,  0),
                 (-1,  1), (0,  1), (1,  1)]
    
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–ª–µ–≤–∞ –∏ —Å–≤–µ—Ä—Ö—É ((-1,0) –∏ (0,-1)) —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏,
    # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É–∑–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–∫–æ–ª–æ —É–≥–ª–∞.
    # –ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:
    directions = [((0, -1), (-1, 0)),  # —Å–≤–µ—Ä—Ö—É –∏ —Å–ª–µ–≤–∞
                  ((0, -1), (1, 0)),   # —Å–≤–µ—Ä—Ö—É –∏ —Å–ø—Ä–∞–≤–∞
                  ((0, 1), (-1, 0)),   # —Å–Ω–∏–∑—É –∏ —Å–ª–µ–≤–∞
                  ((0, 1), (1, 0))]    # —Å–Ω–∏–∑—É –∏ —Å–ø—Ä–∞–≤–∞
    
    for (dx1, dy1), (dx2, dy2) in directions:
        n1_x, n1_y = x + dx1, y + dy1
        n2_x, n2_y = x + dx2, y + dy2
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å–µ–¥–∏ –≤–Ω—É—Ç—Ä–∏ –≥—Ä–∞–Ω–∏—Ü
        if (0 <= n1_x < len(grid)) and (0 <= n1_y < len(grid[0])) \
           and (0 <= n2_x < len(grid)) and (0 <= n2_y < len(grid[0])):
            if grid[n1_y][n1_x] == 1 and grid[n2_y][n2_x] == 1:
                penalty_cost += penalty  # –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ —É–≥–æ–ª

    return penalty_cost

def astar(start, goal, grid, lambda_factor=1.0):
    """A* –ø–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–µ–≥–æ –ø—É—Ç–∏ –Ω–∞ —Å–µ—Ç–∫–µ"""
    
    def heuristic(a, b):
        """–ú–∞–Ω—Ö—ç—Ç—Ç–µ–Ω—Å–∫–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ"""
        return abs(a[0] - b[0]) + abs(a[1] - b[1])

    neighbors = [(0, 1), (0, -1), (1, 0), (-1, 0)]  # –í–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ø—Ä–∞–≤–æ, –≤–ª–µ–≤–æ
    close_set = set()
    came_from = {}
    gscore = {start: 0}
    fscore = {start: heuristic(start, goal) }
    open_set = []
    
    heapq.heappush(open_set, (fscore[start], start))
    
    if grid[goal[1]][goal[0]] == 1:
        return[]
    
    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            return path[::-1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        close_set.add(current)

        for dx, dy in neighbors:
            neighbor = (current[0] + dx, current[1] + dy)

            if neighbor[0] < 0 or neighbor[0] >= len(grid) or neighbor[1] < 0 or neighbor[1] >= len(grid[0]):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã
            
            if grid[neighbor[1]][neighbor[0]] == 1 or neighbor in close_set:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–Ω—ã
            
            tentative_gscore = gscore[current] + 1

            if neighbor not in gscore or tentative_gscore < gscore[neighbor]:
                came_from[neighbor] = current
                gscore[neighbor] = tentative_gscore
                fscore[neighbor] = tentative_gscore + heuristic(neighbor, goal)
                heapq.heappush(open_set, (fscore[neighbor], neighbor))

    return []  # –ï—Å–ª–∏ –ø—É—Ç–∏ –Ω–µ—Ç


def check_for_unknown(path, grid):
    if len(path) < 2:
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –¥–≤–µ —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Ä–æ–±–æ—Ç–∞
    next_positions = path[:2]
    unknown_found = any(grid[y][x] == 2 for x, y in next_positions)

    if unknown_found:
        print("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–æ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É...")
        UpdateMap()
        
    elif grid[robot_y][robot_x - 1] == 1 or grid[robot_y][robot_x + 1] == 1:
        UpdateMap()
        
    elif grid[robot_y - 1][robot_x] == 1 or grid[robot_y + 1][robot_x] == 1:
        UpdateMap()
       
    
def MoveForward():
    global IsMoving
    IsMoving = True
    start_time = robot.getTime()
    MoveTime = 0.1 / (2 * 0.033)
    while robot.step(timestep) != -1:
        current_time = robot.getTime();
        if current_time - start_time <= MoveTime:
            left_motor.setVelocity(2.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
            right_motor.setVelocity(2.0)
        else:
            StopMoving()
            IsMoving = False
            break

def StopMoving():
    left_motor.setVelocity(0.0)  # –ü—Ä–∏–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è - –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
    right_motor.setVelocity(0.0)

def get_new_direction(current_pos, next_pos):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è"""
    dx, dy = next_pos[0] - current_pos[0], next_pos[1] - current_pos[1]

    if dx < 0: return "RIGHT"
    if dx > 0: return "LEFT"
    if dy < 0: return "DOWN"
    if dy > 0: return "UP"

    return None  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ (–æ—à–∏–±–∫–∞)

def needs_turning(current_pos, next_pos, current_dir):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –º–µ–Ω—è—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è"""
    new_dir = get_new_direction(current_pos, next_pos)
    return new_dir != current_dir  # –ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω—É–∂–µ–Ω –ø–æ–≤–æ—Ä–æ—Ç

def get_turn_direction(current_dir, new_dir):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–ª–µ–≤–æ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–æ"""
    turn_map = {
        ("UP", "LEFT"): "LEFT",
        ("UP", "RIGHT"): "RIGHT",
        ("DOWN", "LEFT"): "RIGHT",
        ("DOWN", "RIGHT"): "LEFT",
        ("LEFT", "UP"): "RIGHT",
        ("LEFT", "DOWN"): "LEFT",
        ("RIGHT", "UP"): "LEFT",
        ("RIGHT", "DOWN"): "RIGHT",
    }
    return turn_map.get((current_dir, new_dir), None)  # None = –Ω–µ—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞

def update_movement(path, current_dir):
    global CurrentDir
    current_pos, next_pos = path[0], path[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–¥–æ –ª–∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å
    if needs_turning(current_pos, next_pos, current_dir):
        new_dir = get_new_direction(current_pos, next_pos)
        turn = get_turn_direction(current_dir, new_dir)
        CurrentDir = new_dir
        return new_dir, turn  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –ø–æ–≤–æ—Ä–æ—Ç

    return current_dir, None  # –ï—Å–ª–∏ –Ω–µ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º, –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏

moves_count = 0

# === –î–≤–∏–∂–µ–Ω–∏–µ —Ä–æ–±–æ—Ç–∞ –ø–æ –ø—É—Ç–∏ ===
def move_to_target(path):
    """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ä–æ–±–æ—Ç–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –º–∞—Ä—à—Ä—É—Ç—É"""
    global robot_x, robot_y
    if path:
        dir, turn = update_movement(path, CurrentDir)
        if turn != None:
           robot_x, robot_y = path[0]
           RotationRobot(turn, 90)
           print("–ü–æ–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å –Ω–∞", turn)
           MoveForward()
           check_for_unknown(path, grid_map)
           #UpdateMap()
        else:
            robot_x, robot_y = path[0]
            MoveForward()
            check_for_unknown(path, grid_map)
            #UpdateMap()          
            print("–î–≤–∏–≥–∞—é—Å—å –∫ ", path[0], dir)
            
          # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        
def bresenham(x0, y0, x1, y1):
    """ –ê–ª–≥–æ—Ä–∏—Ç–º –ë—Ä–µ–∑–µ–Ω—Ö—ç–º–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É (x0, y0) –∏ (x1, y1) """
    points = []
    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    sx = 1 if x0 < x1 else -1
    sy = 1 if y0 < y1 else -1
    err = dx - dy

    while True:
        
        points.append((x0, y0))  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É
        
        if x0 == x1 and y0 == y1:
            break
                   
        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x0 += sx
        if e2 < dx:
            err += dx
            y0 += sy
    return points

def is_area_free(grid_map, x, y, radius=30):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å—Ç–µ–Ω–∞ –≤ —Ä–∞–¥–∏—É—Å–µ (–≤ —è—á–µ–π–∫–∞—Ö). 
    –ï—Å–ª–∏ —Å—Ç–µ–Ω –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    for dx in range(-radius, radius + 1):
        for dy in range(-radius, radius + 1):
            nx, ny = x + dx, y + dy
            if 0 <= nx < len(grid_map) and 0 <= ny < len(grid_map[0]):
                if grid_map[ny, nx] == 1:  # –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–µ–Ω–∞
                    return False
    return True
          
# === –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã ===
def update_map(grid_map, lidar_data, robot_x, robot_y, robot_angle):
    robot_pos = robot_x, robot_y
    for i, distance in enumerate(lidar_data):
        if 0.1 < distance < 3.0:  # –ï—Å–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ
            angle = math.radians(i) + math.radians(robot_angle)
            x = int(robot_x + math.cos(angle) * distance * 10)
            y = int(robot_y + math.sin(angle) * distance * 10)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
         
                
            if 0 <= x < map_size and 0 <= y < map_size:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É —Ä–æ–±–æ—Ç–æ–º –∏ —Ç–æ—á–∫–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
                
                for x1, y1 in bresenham(round(robot_pos[0]), round(robot_pos[1]), x, y):
                    if grid_map[y1, x1] == 2:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                        grid_map[y1, x1] = 0  # –°–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                
                if grid_map[y, x] != 1:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –µ—â–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞
                    grid_map[y, x] = 1  # –°—Ç–µ–Ω–∞
                


#fig, ax = plt.subplots()
#img = ax.imshow(grid_map, cmap="gray")


    

def draw_map(grid_map, robot_x, robot_y):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—É –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–æ–∑–∏—Ü–∏–µ–π —Ä–æ–±–æ—Ç–∞"""
    map_size = len(grid_map)
    for y in reversed(range(map_size)):
        row = ""
        for x in reversed(range(map_size)):
            if x == robot_x and y == robot_y:
                row += "3 "  # –†–æ–±–æ—Ç
            elif grid_map[y][x] == 2:
                row += "2 "  # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
            elif grid_map[y][x] == 1:
                row += "1 "  # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
            else:
                row += "0 "  # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
        print(row)
    print("\n" + "="*30 + "\n")  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏

def UpdateMap():
    lidar_data = lidar.getRangeImage()
    update_map(grid_map, lidar_data, robot_x, robot_y, robot_angle)
    draw_map(grid_map, robot_x, robot_y)


def find_object_position(grid_map, robot_x, robot_y, robot_angle, object_angle, max_distance=3.0):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –ø–æ —É–≥–ª—É –∫–∞–º–µ—Ä—ã"""
    
    # –£–≥–æ–ª –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ä—Ç—ã
    absolute_angle = math.radians(robot_angle) + object_angle  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —É–≥–æ–ª
    x_end = int(robot_x + math.cos(absolute_angle) * max_distance * 10)
    y_end = int(robot_y + math.sin(absolute_angle) * max_distance * 10)

    # –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    object_x, object_y = None, None
    for x, y in bresenham(robot_x, robot_y, x_end, y_end):
        if not (0 <= x < len(grid_map) and 0 <= y < len(grid_map[0])):
            break  # –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
        
        if grid_map[y, x] == 1:  # –ï—Å–ª–∏ –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ —Å—Ç–µ–Ω—É
            print(x, y)
            break
        
        object_x, object_y = x, y  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–±–æ–¥–Ω—É—é —Ç–æ—á–∫—É

    if object_x is None or object_y is None:
        print("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    print(f"–û–±—ä–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ ({object_x}, {object_y})")
    return object_x, object_y  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

IsStart = True

while robot.step(timestep) != -1:
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–∞–º–µ—Ä—ã
    frame_count +=1
    #img.set_data(grid_map)
    #plt.pause(0.01)  # –°–Ω–∏–∑–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    
    
    #plt.imshow(grid_map, cmap="gray")
    #plt.pause(0.1)
    if IsStart:
        UpdateMap()
        IsStart = False
        
    if target_position and frame_count % 20 == 0:
        
        if not IsMoving and not IsRotating:
            path = astar((robot_x, robot_y), target_position, grid_map)
            if path:
                print(f"–ü—É—Ç—å –∫ —Ü–µ–ª–∏ –Ω–∞–π–¥–µ–Ω: {path}")
                move_to_target(path)  # –î–≤–∏–≥–∞–µ–º —Ä–æ–±–æ—Ç–∞ –ø–æ –ø—É—Ç–∏
                
    image = camera.getImage()
    if image:
        width = camera.getWidth()
        height = camera.getHeight()
        frame = np.frombuffer(image, np.uint8).reshape((height, width, 4))  # Webots –∏—Å–ø–æ–ª—å–∑—É–µ—Ç (H, W, C)
        frame = cv2.cvtColor(frame, cv2.COLOR_BGRA2BGR)  # –£–±–∏—Ä–∞–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª

        # –ü–æ–∏—Å–∫ –∫—Ä–∞—Å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        red_position, obj_width = detect_green(frame)
        if red_position and not IsFound:
            obj_x = red_position[0]
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∞—Å–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: {red_position}")
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã
            if obj_x < center_x - dead_zone:
                None
                #IsFound = False
            elif obj_x > center_x + dead_zone:
                None
                #IsFound = False
            else:
                print("–û–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É.")
                Obj_Angle = servo_angle
                IsFound = True
    
    if not IsFound:
        servo_angle += servo_step  # –î–≤–∏–≥–∞–µ–º –∫–∞–º–µ—Ä—É, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –æ–±—ä–µ–∫—Ç
        if servo_angle > 1.57 or servo_angle < -1.57:
            servo_step = -servo_step  # –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        servo.setPosition(servo_angle)
        
    if IsFound and not IsStartToObject:
        servo.setPosition(0.85)  # –§–∏–∫—Å–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—É –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
        print(Obj_Angle)
        target_position = find_object_position(grid_map, robot_x, robot_y, robot_angle, 3.14 - Obj_Angle)
        IsStartToObject = True
        print(robot_angle)
        draw_map(grid_map, robot_x, robot_y)          
    #if frame_count % 10 == 0 and not IsRotating:
    cv2.imshow("Camera View", frame)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ª–∏–¥–∞—Ä–∞
    #lidar_data = lidar.getRangeImage()
    #if lidar_data:
    #    min_distance = min(lidar_data)
    #    print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞: {min_distance:.2f} –º")
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
        
#plt.show()
cv2.destroyAllWindows()
